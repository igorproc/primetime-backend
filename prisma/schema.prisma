generator client {
  provider = "prisma-client-js"
}

datasource data {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// App

model application {
  appId            Int                 @id @default(autoincrement()) @map("app_id")
  title            String              @unique() @map("title") @data.VarChar(64)
  isVerified       Boolean             @default(true) @map("is_verified")
  ownerUid         Int                 @map("owner_uid") @data.UnsignedInt
  secureKey        String              @unique() @map("secure_key") @data.VarChar(256)
  accessKey        String              @map("access_key") @data.VarChar(256)
  status           applications_status @default(disabled)
  accessPermission String              @map("access_permission") @data.VarChar(512)
  domain           String              @unique() @data.VarChar(64)
  redirectUri      String              @map("redirect_uri") @data.VarChar(64)
  createdAt        DateTime            @default(now()) @map("created_at")

  @@index([ownerUid], map: "owner_uid")
  @@map("applications")
}

// Device

model device {
  id        Int              @id @default(autoincrement()) @map("id")
  clientId  String           @unique @default(uuid()) @map("client_id")
  platform  device_platforms @map("platform")
  ip        String           @map("ip") @data.VarChar(32)
  userId    Int?             @map("user_id")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @default(now()) @updatedAt @map("updated_at")

  // Relations
  user  user?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  token token[]

  @@index([userId])
  @@map("devices")
}

// Users

model user {
  id          Int        @id @map("id")
  role        user_roles @default(USER_DEFAULT) @map("role")
  firstName   String     @map("first_name") @data.VarChar(64)
  username    String     @unique() @default(uuid()) @map("login") @data.VarChar(64)
  photoUrl    String     @unique() @map("photo_url")
  lastVisited DateTime   @default(now()) @map("last_visited")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at")

  // Relations
  device device[]
  token  token[]

  @@map("users")
}

model token {
  id           Int      @id @default(autoincrement()) @map("id")
  userId       Int      @map("user_id")
  clientId     String   @map("client_id")
  accessToken  String   @map("access_token") @data.VarChar(1024)
  refreshToken String   @map("refresh_token") @data.VarChar(256)
  expiresAt    DateTime @map("expires_at")
  revoked      Boolean  @default(false) @map("is_revoked") @data.TinyInt
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  device device @relation(fields: [clientId], references: [clientId], onDelete: Cascade)

  // Index
  @@index([refreshToken])
  @@map("tokens")
}

// Balancers

model dataBalancer {
  id       Int             @id @default(autoincrement()) @map("id")
  code     balancer_code   @unique @map("code")
  name     String          @unique @map("display_name") @data.VarChar(32)
  docs     String          @unique @map("documentation_link") @data.VarChar(128)
  status   balancer_status @map("status")
  selected Boolean         @default(false) @data.TinyInt

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  dataBalancerToken dataBalancerToken[]

  // Index
  @@index([code])
  @@map("data_balancers")
}

model dataBalancerToken {
  id    Int           @id @default(autoincrement()) @map("id")
  type  balancer_code @map("balancer_code")
  token String        @map("token") @data.VarChar(64)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  balancer dataBalancer @relation(fields: [type], references: [code])

  // Index
  @@index([type])
  @@map("data_balancer_tokens")
}

// Movie

model watchContent {
  id            Int         @id @default(autoincrement()) @map("id")
  type          movie_types @map("type")
  slug          String      @unique @map("slug") @data.VarChar(64)
  duration      Int?        @map("duration") @data.UnsignedInt
  kinopoiskId   Int         @unique @map("kinopoisk_id") @data.UnsignedInt
  imdbId        String?     @unique @map("imdb_id") @data.VarChar(12)
  posterDisplay String      @map("poster_display") @data.VarChar(256)
  posterPreview String      @map("poster_preview") @data.VarChar(256)
  ageLimits     Int?        @map("age_limits") @data.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  years        movieYear?
  movieGenre   movieGenre[]
  movieName    movieName[]
  moviteRating movieRating[]
  movieCountry movieCountry[]

  // Index
  @@index([kinopoiskId])
  @@map("watchs_content")
}

model movieYear {
  id    Int  @id
  year  Int  @map("release_year") @data.UnsignedInt
  start Int? @map("start_show") @data.UnsignedInt
  end   Int? @map("end_show") @data.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  watchContent watchContent @relation(fields: [id], references: [id])

  // Index
  @@map("movie_years")
}

model movieGenre {
  id      Int    @id @default(autoincrement()) @map("id")
  watchId Int    @map("watch_id")
  name    String @map("name") @data.VarChar(32)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  genres       genre        @relation(fields: [name], references: [name], onDelete: Cascade, onUpdate: NoAction)
  watchContent watchContent @relation(fields: [watchId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Index
  @@map("movie_genres")
}

model movieName {
  id      Int     @id @default(autoincrement()) @map("id")
  watchId Int     @map("watch_id")
  code    String  @map("code") @data.VarChar(5)
  name    String? @map("name") @data.VarChar(128)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  watchContent watchContent @relation(fields: [watchId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Index
  @@map("movie_names")
}

model movieRating {
  id      Int               @id @default(autoincrement()) @map("id")
  watchId Int               @map("watch_id")
  code    movie_votes_codes @map("code")
  rating  Float?            @map("rating") @data.Float
  votes   Int?              @map("votes") @data.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  watchContent watchContent @relation(fields: [watchId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  // Index
  @@map("movie_ratings")
}

model movieCountry {
  id      Int    @id @default(autoincrement()) @map("id")
  watchId Int    @map("watch_id")
  name    String @map("name")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  countries    country      @relation(fields: [name], references: [name], onDelete: Cascade, onUpdate: NoAction)
  watchContent watchContent @relation(fields: [watchId], references: [id])

  // Index
  @@map("movie_countries")
}

// Genres

model genre {
  id         Int    @id @default(autoincrement()) @map("id")
  name       String @unique @map("name") @data.VarChar(32)
  popularity Int    @map("popularity") @data.UnsignedInt

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  movieGenre movieGenre[]

  // Index
  @@index([name])
  @@map("genres")
}

// Countries

model country {
  id   Int    @id @default(autoincrement()) @map("id")
  name String @unique @map("name") @data.VarChar(64)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  movieCountry movieCountry[]

  // Index
  @@index([name])
  @@map("countries")
}

// Enums

enum applications_status {
  enabled
  disabled
}

enum user_roles {
  ADMIN
  MODERATOR
  USER_DEFAULT
  USER_VERIFY
  AUTHOR
  CO_AUTHOR
  DEV_VERIFY
  DEV_POOL
  QA_VERIFY
  QA_DEFAULT
  NONE
}

enum device_platforms {
  WINDOWS
  LINUX
  ANDROID
  IPHONE
  IPAD
  MACINTOSH
}

enum balancer_code {
  KP
  KP_TG_KEY
}

enum balancer_status {
  ONLINE
  OFFLINE
  DEPRECATED
}

enum movie_types {
  MOVIE
  SERIES
  SHOW
}

enum movie_votes_codes {
  KINOPPOISK
  IMDB
  CRITICS
  RU_CRITICS
}
