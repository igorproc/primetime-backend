generator client {
  provider = "prisma-client-js"
}

datasource data {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// App Models
model application {
  appId            Int                 @id @default(autoincrement()) @map("app_id")
  title            String              @unique() @map("title") @data.VarChar(64)
  isVerified       Boolean             @default(true) @map("is_verified")
  ownerUid         Int                 @map("owner_uid") @data.UnsignedInt
  secureKey        String              @unique() @map("secure_key") @data.VarChar(256)
  accessKey        String              @map("access_key") @data.VarChar(256)
  status           applications_status @default(disabled)
  accessPermission String              @map("access_permission") @data.VarChar(512)
  domain           String              @unique() @data.VarChar(64)
  redirectUri      String              @map("redirect_uri") @data.VarChar(64)
  createdAt        DateTime            @default(now()) @map("created_at")

  @@index([ownerUid], map: "owner_uid")
  @@map("applications")
}

model device {
  id        Int              @id @default(autoincrement()) @map("id")
  clientId  String           @unique @default(uuid()) @map("client_id")
  platform  device_platforms @map("platform")
  ip        String           @map("ip") @data.VarChar(13)
  userId    Int?             @map("user_id")
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @default(now()) @map("updated_at")

  // Relations
  user user? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([userId])
  @@map("devices")
}

// Users Models
model user {
  id               Int                @id @default(autoincrement()) @map("id")
  role             user_roles         @default(USER_DEFAULT) @map("role")
  username         String             @unique() @default(uuid()) @map("login") @data.VarChar(64)
  name             String             @map("name") @data.VarChar(32)
  surname          String             @map("surname") @data.VarChar(32)
  email            String             @unique() @map("email") @data.VarChar(64)
  password         String             @map("password") @data.VarChar(512)
  isVerified       Boolean            @default(false) @map("is_verified")
  lastVisited      DateTime           @default(now()) @map("last_visited")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @default(now()) @map("updated_at")
  // Relations
  userTelegramData userTelegramData[]
  device           device[]

  @@map("users")
}

model userTelegramData {
  id         Int      @id @default(autoincrement()) @map("id")
  userId     Int      @unique
  telegramId Int      @unique @map("telegram_id") @data.UnsignedInt
  firstName  String   @map("first_name") @data.VarChar(64)
  username   String   @map("username") @data.VarChar(64)
  photoUrl   String   @map("photo_url") @data.VarChar(256)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  // Relations
  user user @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)

  @@index([userId], map: "user_id_for_telegram_index")
  @@map("users_telegram_data")
}

enum applications_status {
  enabled
  disabled
}

enum user_roles {
  ADMIN
  MODERATOR
  USER_DEFAULT
  USER_VERIFY
  AUTHOR
  CO_AUTHOR
  DEV_VERIFY
  DEV_POOL
  QA_VERIFY
  QA_DEFAULT
  NONE
}

enum device_platforms {
  WINDOWS
  LINUX
  ANDROID
  IPHONE
  IPAD
  MACINTOSH
}
